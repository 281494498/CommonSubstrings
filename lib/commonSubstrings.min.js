function SuffixTrie(a){this.options=a||{},this.structure={},this.debug=void 0!==this.options.debug&&a.debug,this.minLENGTH=void 0===this.options.minLength?3:a.minLength,this.minOccurrence=void 0===this.options.minOccurrence?2:a.minOccurrence,this.isByLength=void 0!==this.options.byLength&&a.byLength,this.save=[],this.array=null,this.labelArray=null,this.fragmentsArray=null,this.fragmentTrie={},this.rebuildArray}function findFragments(b,c,d,e,i,j){for(var k=d,m=b.split(""),n=0;n<m.length;n++){var o=m[n],l=k[o];if(n+1>=e){var p=b.substring(0,n+1);if(l.hasOwnProperty("listed")&&!l.listed){if(l.hasOwnProperty("source")){if(c[p]={},c[p].source=l.source,c[p].weight=l.weight,null==l.weight&&console.warn("escape case! fragment does not has weight property, node is ",c[p]),c.hasOwnProperty(p)&&j){for(var f in c)f!==p&&c.hasOwnProperty(f)&&c.hasOwnProperty(p)&&-1!==f.indexOf(p)&&(c[p].source=c[p].source.filter(function(a){return 0>this.indexOf(a)},c[f].source));c[p].source.length<i&&delete c[p]}l.listed=!0}l.hasOwnProperty("next")&&findFragments(l.next,c,d,e,i,!0)}}k=l}}function deleteFragmentInLabelArray(a,b,c){var d=c[a[0]];d.hasOwnProperty(b)&&delete d[b]}function buildFragmentTrie(b,c){for(var d=0;d<c.length;d++)for(var e,f=c[d].name,g=f.split(""),h=b,i=0;i<g.length;i++)e=g[i],h.hasOwnProperty(e)||(h[e]={}),h=h[e],i==g.length-1&&(h.source=c[d].source,h.name=c[d].name,h.weight=c[d].weight,h.list=!1)}function removeTrie(b,c,d,f,g,i){for(var e in c)if(c.hasOwnProperty(e)&&1===e.length&&0===b.indexOf(e))if(!(1===b.length))removeTrie(b.slice(1),c[e],d,f,g,i);else if(c[e].hasOwnProperty("list")){var a={source:c[e].source},j=c[e].name;a.name=j,a.weight=c[e].weight,delete c[e].list,d.push(a),c[e].source.forEach(function(a){delete g[a][j];var b=f[a];i["delete"](b,a),b-=j.length,i.insert(b,a)})}}function uniqueArray(a){for(var b=a.concat(),c=0;c<b.length;++c)for(var d=c+1;d<b.length;++d)b[c]===b[d]&&b.splice(d--,1);return b}var BinarySearchTree=require("./bst");SuffixTrie.prototype.refresh=function(){this.structure={},this.save=[],this.array=null,this.labelArray=null,this.fragmentsArray=null,this.fragmentTrie={},this.rebuildArray},SuffixTrie.prototype.weigh=function(){return this.isByLength?this.weighByMax():this.weighByAverage()},SuffixTrie.prototype.build=function(a){var b=this.debug;this.buildLabelTrie(a),this.optimize(this.structure),b&&console.log("after optimization our label trie of array length "+this.array.length+" is ",this.structure),this.listLabel(),b&&console.log("get the compressed label array (without duplicate fragments ) of array length "+this.array.length+" is ",this.labelArray),b&&console.log("and fragments array of length "+this.fragmentsArray.length+" is ",this.fragmentsArray),this.clearRedundantFragment(),b&&console.log("get the cleared label array (without duplicate fragments ) of array length "+this.array.length+" is ",this.labelArray),b&&console.log("and cleared fragments array of length "+this.fragmentsArray.length+" is ",this.fragmentsArray),this.rebuild(),b&&console.log("rebuild ended",this.rebuildArray)},SuffixTrie.prototype.buildLabelTrie=function(a){this.array=a;var b=this.structure,d=this.minLENGTH;a.forEach(function(j,e){for(var i=!0,k={},m=0,p=j.length;p-d>=m;m++)for(var o=b,q=j.substring(m),l=q.split(""),r=0;r<l.length;r++){var t=l[r],g=o[t];r==l.length-1?(null==g?o[t]={source:[e],listed:!1}:g.hasOwnProperty("source")?g.source.push(e):(o[t].source=[e],o[t].listed=!1),o=o[t],i?i=!1:k.next=q,k=o):o=null==g?o[t]={}:o[t]}})},SuffixTrie.prototype.optimize=function(b,c){var d=this.minOccurrence,e=[];c=void 0===c?-1:c,c++;var f=c>=this.minLENGTH;for(var g in b)if(b.hasOwnProperty(g))if(1===g.length){var j=this.optimize(b[g],c);f&&(e=e.concat(j))}else"source"==g&&f&&(e=e.concat(b.source));e=uniqueArray(e);var a=e.length>=d;if(f=f&&a){var k=1===Object.keys(b).length;k||(b.source=e,b.level=c,b.listed=!1,b.weight=e.length*c,e=[])}else delete b.source;return e},SuffixTrie.prototype.listLabel=function(b){var c=this.array,d=this.structure,j=[],i=[],k=this.minLENGTH,m=this.minOccurrence;b=void 0===b?1:b;for(var a=b-1,n=0;n<c.length;a++,a%=c.length,n++){var p=c[a],l={};if(p.length<k)j.push(l);else{for(var q in findFragments(p,l,d,k,m,!1),l)if(l.hasOwnProperty(q)){var f=i.push(l[q])-1;i[f].name=q}j.push(l)}}return this.labelArray=j,this.fragmentsArray=i,j},SuffixTrie.prototype.rebuild=function(){var a=JSON.parse(JSON.stringify(this.labelArray));a.forEach(function(b,c){for(var d in b)b.hasOwnProperty(d)&&b[d].source.forEach(function(e){e>c&&(a[e][d]=b[d])})}),this.rebuildArray=a},SuffixTrie.prototype.weighByAverage=function(){var a=this.debug,b=this.fragmentsArray,c=this.fragmentsArray.length;return b.sort(function(a,b){return b.weight-a.weight}),a&&console.log("weigh by average:  result of length "+c+" is",b),"number"==typeof this.options.limit&&(c=this.options.limit<c?this.options.limit:c),b.slice(0,c)},SuffixTrie.prototype.weighByMax=function(){var b=this.debug;buildFragmentTrie(this.fragmentTrie,this.fragmentsArray);var c=JSON.parse(JSON.stringify(this.rebuildArray)),d=[],e=this.fragmentTrie,f=this.fragmentsArray.length,g=this.array.map(function(a){return a.length}),i=new BinarySearchTree;for(g.forEach(function(a,b){i.insert(a,b)}),"number"==typeof this.options.limit&&(f=this.options.limit<f?this.options.limit:f);d.length<f;){var a=i.getMaxKey(),j=i.search(a);if(0!==j.length){var h=j[0],k=Object.keys(c[h]);0<k.length&&(k.sort(function(a,b){return b.length-a.length}),removeTrie(k[0],e,d,g,c,i)),i["delete"](a,h)}else i["delete"](a)}return this.fragmentsArray=d,b&&console.log("weigh by max:  result of length "+d.length+" is",d),d.slice(0,f)},SuffixTrie.prototype.clearRedundantFragment=function(){var a=this.fragmentsArray,b=this.minOccurrence,c=[],d=this.labelArray;a.sort(function(a,b){return a.name.length-b.name.length}),a.forEach(function(e,f){for(var g,i=e.source.slice(),j=f+1;j<a.length;j++)g=a[j],-1!==g.name.indexOf(e.name)&&(e.source=e.source.filter(function(a){return-1===this.indexOf(a)},g.source));e.source.length>=b?c.push(e):i.length!==e.source.length&&deleteFragmentInLabelArray(i,e.name,d)}),this.fragmentsArray=c},module.exports=SuffixTrie;