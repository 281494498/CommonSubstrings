'use strict';var _lodash=require('lodash');var _lodash2=_interopRequireDefault(_lodash);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function SuffixTrie(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{minLength:3,minOccurrence:2};this.structure={};this.horizontalStructure={horizontal:{}};this.array=null;this.minLength=options.minLength;this.minOccurrence=options.minOccurrence}SuffixTrie.prototype.list=function(array){this.buildTrie(array);this.accumulateVertically(this.structure);this.excludeDuplicateHorizontally(this.horizontalStructure);return this.listFragments(this.structure)};function addHorizontalPointer(node,name,pointer){if(!node.hasOwnProperty('horizontal')){node['horizontal']={}}if(name){node['horizontal'][name]=pointer}}SuffixTrie.prototype.buildTrie=function(array){var _this=this;this.array=array;var root=this.structure;var minLength=this.minLength;array.forEach(function(word,index){var lastSuffixPointerHorizontal=null;var lastSuffixNameHorizontal=null;for(var i=0,l=word.length;i<=l-minLength;i++){var pointer=root;var suffix=word.substring(i);var letters=suffix.split('');for(var j=0;j<letters.length;j++){var letter=letters[j];var currentNode=pointer[letter];if(j===letters.length-1){if(currentNode==null){pointer[letter]={source:[index],listed:false}}else if(currentNode.hasOwnProperty('source')){currentNode['source'].push(index)}else{currentNode['source']=[index];currentNode['listed']=false;if(currentNode.hasOwnProperty('horizontal')){console.warn('branch node should not be linked horizontal, check it')}}addHorizontalPointer(pointer[letter],lastSuffixNameHorizontal,lastSuffixPointerHorizontal);if(j!==minLength-1){lastSuffixPointerHorizontal=pointer[letter];lastSuffixNameHorizontal=suffix[0]}else{_this.horizontalStructure.horizontal[suffix]=pointer[letter]}}else if(currentNode==null){pointer[letter]={}}else{}pointer=pointer[letter]}}})};SuffixTrie.prototype.accumulateVertically=function(root){var rootLevel=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;var accumulatedOrigins=[];rootLevel++;var validLength=rootLevel>=this.minLength;for(var child in root){if(!root.hasOwnProperty(child)||child.length!==1)continue;var currentNode=root[child];var leafOrigins=this.accumulateVertically(currentNode,rootLevel);if(!validLength)continue;accumulatedOrigins=accumulatedOrigins.concat(leafOrigins)}if(root.hasOwnProperty('source')){accumulatedOrigins=accumulatedOrigins.concat(root.source)}accumulatedOrigins=_lodash2.default.uniq(accumulatedOrigins);var validOccurrence=accumulatedOrigins.length>=this.minOccurrence;if(validOccurrence){root['source']=accumulatedOrigins;root['level']=rootLevel;root['listed']=false;root['weight']=accumulatedOrigins.length*rootLevel;accumulatedOrigins=[]}else if(!root.hasOwnProperty('horizontal')){delete root['source']}return accumulatedOrigins};SuffixTrie.prototype.excludeDuplicateHorizontally=function(root){var rootSuffix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';var rootLevel=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.minLength-2;rootLevel++;var listedOrigins=[];if(root.hasOwnProperty('horizontal')){for(var child in root.horizontal){if(!root.horizontal.hasOwnProperty(child))continue;var currentNode=root.horizontal[child];var leafListedOrigins=this.excludeDuplicateHorizontally(currentNode,child+rootSuffix,rootLevel);listedOrigins=listedOrigins.concat(leafListedOrigins)}}listedOrigins=_lodash2.default.uniq(listedOrigins);var currentOrigins=_lodash2.default.xor(root.source,listedOrigins);var validOccurrence=currentOrigins.length>=this.minOccurrence;if(validOccurrence&&root.source){listedOrigins=root.source;root['source']=currentOrigins;root['weight']=currentOrigins.length*rootLevel}else{delete root['source'];delete root['weight']}return listedOrigins};SuffixTrie.prototype.listFragments=function(root){var name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';var fragments=[];for(var child in root){if(!root.hasOwnProperty(child)||child.length!==1)continue;var leafFragments=this.listFragments(root[child],name+child);fragments=fragments.concat(leafFragments)}if(root.hasOwnProperty('source')&&name!==''){fragments.push({name:name,source:root.source,weight:root.weight})}return fragments};function listFragment(array,options){var tree=new SuffixTrie(options);return tree.list(array)}module.exports=listFragment;